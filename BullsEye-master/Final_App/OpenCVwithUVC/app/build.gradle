apply plugin: 'com.android.application'

android {
    compileSdkVersion versionCompiler
    buildToolsVersion versionBuildTool

    defaultConfig {
        minSdkVersion 18
        targetSdkVersion versionTarget
        versionCode 1
        versionName "1.0"

        applicationId "com.serenegiant.opencvwithuvc"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets.main.jni.srcDirs = [] // disable automatic ndk-build call, which ignore our Android.mk
    sourceSets.main.jniLibs.srcDir 'src/main/libs'

    // call regular ndk-build(.cmd) script from app directory
    task ndkBuild(type: Exec, description: 'Compile JNI source via NDK') {
        commandLine "C:\\Users\\Anannya-Uberoi\\AppData\\Local\\Android\\Sdk\\ndk-bundle\\ndk-build.cmd",
                'NDK_PROJECT_PATH=build/intermediates/ndk',
                'NDK_LIBS_OUT=src/main/jniLibs',
                'APP_BUILD_SCRIPT=src/main/jni/Android.mk',
                'NDK_APPLICATION_MK=src/main/jni/Application.mk'
    }
    tasks.withType(JavaCompile) {
        compileTask -> compileTask.dependsOn ndkBuild
    }

    tasks.withType(JavaCompile) {
        compileTask -> compileTask.dependsOn ndkBuild
    }

    task cleanNative(type: Exec) {
        workingDir file('src/main')
        //commandLine getNdkBuildCmd(), 'clean'
        commandLine "C:\\Users\\Anannya-Uberoi\\AppData\\Local\\Android\\Sdk\\ndk-bundle\\ndk-build.cmd",'clean'
    }

    clean.dependsOn cleanNative



    externalNativeBuild {
        ndkBuild {
            path 'src/main/jni/Android.mk'
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile project(':usbCameraCommon-release')
    compile project(':libuvccamera-release')
    compile project(':opencv')
    //compile project(':openCVLibrary320')
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    compile 'com.android.support:support-annotations:25.3.1'
    compile 'com.android.support:appcompat-v7:25.3.1'
    compile 'com.android.support:design:26.0.0-alpha1'
    testCompile 'junit:junit:4.12'
}

def getNdkDir() {
    if (System.env.ANDROID_NDK_ROOT != null)
        return System.env.ANDROID_NDK_ROOT

    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    def ndkdir = properties.getProperty('ndk.dir', null)
    if (ndkdir == null)
        throw new GradleException("NDK location not found. Define location with ndk.dir in the local.properties file or with an ANDROID_NDK_ROOT environment variable.")

    return ndkdir
}